----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    00:37:29 04/14/2025 
-- Design Name: 
-- Module Name:    abc - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
Use ieee.std_logic_arith.all; 
Use ieee.std_logic_unsigned.all;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity abc is
    Port ( clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
           d : in  STD_LOGIC_VECTOR (1 downto 0);
           x : out  STD_LOGIC_VECTOR (8 downto 0));
end abc;

architecture Behavioral of abc is
type states is (A,B,C,E); 
signal state: states; 
signal ten : STD_LOGIC := '0';
signal timer : STD_LOGIC_VECTOR(1 downto 0) := "00";
begin 
            process(clk)
begin	 
   if (clk'event and clk='1') then 
           if  ten = '0' then 
               timer<="00"; 
else 
            timer<=timer +"01"; 
end if; 
end if; 
end process;               
process(clk, reset) 
begin 
       if (clk'event and clk='1') then
		    if reset = '1' then 
               state<=A; 
                ten<='0'; 
else 
case state is 
when A => if timer /= d then 
                    state<=A; 
                    ten<='1'; 
                    X<="100010010"; 
                  else 
                   state<=B; 
                   ten<='0'; 
                   X<="100001001"; 
                   end if; 
when B => if timer /= d then 
                    state<=B; 
                    ten<='1'; 
                    X<="100001001"; 
                  else 
                   state<=C; 
                   ten<='0'; 
                   X<="010100100"; 
                   end if; 
when C => if timer /= d then 
                    state<=C; 
                    ten<='1'; 
                    X<="010100100"; 
                  else 
                   state<=E; 
                   ten<='0'; 
                   X<="001100100"; 
                   end if; 
 when E => if timer /= d then 
                    state<=C; 
                    ten<='1'; 
                    X<="001100100"; 
                    else 
                    state<=A; 
                    ten<='0'; 
                    X<="100010010"; 
                    end if; 
end case; 
end if;
end if;
end process; 
end Behavioral;